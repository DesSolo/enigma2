// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// SecretStorage is an autogenerated mock type for the SecretStorage type
type SecretStorage struct {
	mock.Mock
}

type SecretStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *SecretStorage) EXPECT() *SecretStorage_Expecter {
	return &SecretStorage_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *SecretStorage) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SecretStorage_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type SecretStorage_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *SecretStorage_Expecter) Close() *SecretStorage_Close_Call {
	return &SecretStorage_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *SecretStorage_Close_Call) Run(run func()) *SecretStorage_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SecretStorage_Close_Call) Return(_a0 error) *SecretStorage_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SecretStorage_Close_Call) RunAndReturn(run func() error) *SecretStorage_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, key
func (_m *SecretStorage) Delete(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SecretStorage_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type SecretStorage_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *SecretStorage_Expecter) Delete(ctx interface{}, key interface{}) *SecretStorage_Delete_Call {
	return &SecretStorage_Delete_Call{Call: _e.mock.On("Delete", ctx, key)}
}

func (_c *SecretStorage_Delete_Call) Run(run func(ctx context.Context, key string)) *SecretStorage_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *SecretStorage_Delete_Call) Return(_a0 error) *SecretStorage_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SecretStorage_Delete_Call) RunAndReturn(run func(context.Context, string) error) *SecretStorage_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, key
func (_m *SecretStorage) Get(ctx context.Context, key string) (string, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecretStorage_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type SecretStorage_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *SecretStorage_Expecter) Get(ctx interface{}, key interface{}) *SecretStorage_Get_Call {
	return &SecretStorage_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *SecretStorage_Get_Call) Run(run func(ctx context.Context, key string)) *SecretStorage_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *SecretStorage_Get_Call) Return(_a0 string, _a1 error) *SecretStorage_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecretStorage_Get_Call) RunAndReturn(run func(context.Context, string) (string, error)) *SecretStorage_Get_Call {
	_c.Call.Return(run)
	return _c
}

// IsReady provides a mock function with given fields: ctx
func (_m *SecretStorage) IsReady(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IsReady")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecretStorage_IsReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsReady'
type SecretStorage_IsReady_Call struct {
	*mock.Call
}

// IsReady is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SecretStorage_Expecter) IsReady(ctx interface{}) *SecretStorage_IsReady_Call {
	return &SecretStorage_IsReady_Call{Call: _e.mock.On("IsReady", ctx)}
}

func (_c *SecretStorage_IsReady_Call) Run(run func(ctx context.Context)) *SecretStorage_IsReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SecretStorage_IsReady_Call) Return(_a0 bool, _a1 error) *SecretStorage_IsReady_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecretStorage_IsReady_Call) RunAndReturn(run func(context.Context) (bool, error)) *SecretStorage_IsReady_Call {
	_c.Call.Return(run)
	return _c
}

// IsUniq provides a mock function with given fields: ctx, key
func (_m *SecretStorage) IsUniq(ctx context.Context, key string) (bool, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for IsUniq")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecretStorage_IsUniq_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsUniq'
type SecretStorage_IsUniq_Call struct {
	*mock.Call
}

// IsUniq is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *SecretStorage_Expecter) IsUniq(ctx interface{}, key interface{}) *SecretStorage_IsUniq_Call {
	return &SecretStorage_IsUniq_Call{Call: _e.mock.On("IsUniq", ctx, key)}
}

func (_c *SecretStorage_IsUniq_Call) Run(run func(ctx context.Context, key string)) *SecretStorage_IsUniq_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *SecretStorage_IsUniq_Call) Return(_a0 bool, _a1 error) *SecretStorage_IsUniq_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecretStorage_IsUniq_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *SecretStorage_IsUniq_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, key, message, ttl
func (_m *SecretStorage) Save(ctx context.Context, key string, message string, ttl time.Duration) error {
	ret := _m.Called(ctx, key, message, ttl)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Duration) error); ok {
		r0 = rf(ctx, key, message, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SecretStorage_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type SecretStorage_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - message string
//   - ttl time.Duration
func (_e *SecretStorage_Expecter) Save(ctx interface{}, key interface{}, message interface{}, ttl interface{}) *SecretStorage_Save_Call {
	return &SecretStorage_Save_Call{Call: _e.mock.On("Save", ctx, key, message, ttl)}
}

func (_c *SecretStorage_Save_Call) Run(run func(ctx context.Context, key string, message string, ttl time.Duration)) *SecretStorage_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(time.Duration))
	})
	return _c
}

func (_c *SecretStorage_Save_Call) Return(_a0 error) *SecretStorage_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SecretStorage_Save_Call) RunAndReturn(run func(context.Context, string, string, time.Duration) error) *SecretStorage_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewSecretStorage creates a new instance of SecretStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSecretStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *SecretStorage {
	mock := &SecretStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
