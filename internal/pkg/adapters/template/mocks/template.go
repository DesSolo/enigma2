// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	template "enigma/internal/pkg/adapters/template"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// Template is an autogenerated mock type for the Template type
type Template struct {
	mock.Mock
}

type Template_Expecter struct {
	mock *mock.Mock
}

func (_m *Template) EXPECT() *Template_Expecter {
	return &Template_Expecter{mock: &_m.Mock}
}

// RenderFile provides a mock function with given fields: name, writer, data
func (_m *Template) RenderFile(name string, writer io.Writer, data template.Data) error {
	ret := _m.Called(name, writer, data)

	if len(ret) == 0 {
		panic("no return value specified for RenderFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, io.Writer, template.Data) error); ok {
		r0 = rf(name, writer, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Template_RenderFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenderFile'
type Template_RenderFile_Call struct {
	*mock.Call
}

// RenderFile is a helper method to define mock.On call
//   - name string
//   - writer io.Writer
//   - data template.Data
func (_e *Template_Expecter) RenderFile(name interface{}, writer interface{}, data interface{}) *Template_RenderFile_Call {
	return &Template_RenderFile_Call{Call: _e.mock.On("RenderFile", name, writer, data)}
}

func (_c *Template_RenderFile_Call) Run(run func(name string, writer io.Writer, data template.Data)) *Template_RenderFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(io.Writer), args[2].(template.Data))
	})
	return _c
}

func (_c *Template_RenderFile_Call) Return(_a0 error) *Template_RenderFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Template_RenderFile_Call) RunAndReturn(run func(string, io.Writer, template.Data) error) *Template_RenderFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewTemplate creates a new instance of Template. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTemplate(t interface {
	mock.TestingT
	Cleanup(func())
}) *Template {
	mock := &Template{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
