// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// SecretsProvider is an autogenerated mock type for the SecretsProvider type
type SecretsProvider struct {
	mock.Mock
}

type SecretsProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *SecretsProvider) EXPECT() *SecretsProvider_Expecter {
	return &SecretsProvider_Expecter{mock: &_m.Mock}
}

// CheckExistsSecret provides a mock function with given fields: ctx, token
func (_m *SecretsProvider) CheckExistsSecret(ctx context.Context, token string) error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for CheckExistsSecret")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SecretsProvider_CheckExistsSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckExistsSecret'
type SecretsProvider_CheckExistsSecret_Call struct {
	*mock.Call
}

// CheckExistsSecret is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *SecretsProvider_Expecter) CheckExistsSecret(ctx interface{}, token interface{}) *SecretsProvider_CheckExistsSecret_Call {
	return &SecretsProvider_CheckExistsSecret_Call{Call: _e.mock.On("CheckExistsSecret", ctx, token)}
}

func (_c *SecretsProvider_CheckExistsSecret_Call) Run(run func(ctx context.Context, token string)) *SecretsProvider_CheckExistsSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *SecretsProvider_CheckExistsSecret_Call) Return(_a0 error) *SecretsProvider_CheckExistsSecret_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SecretsProvider_CheckExistsSecret_Call) RunAndReturn(run func(context.Context, string) error) *SecretsProvider_CheckExistsSecret_Call {
	_c.Call.Return(run)
	return _c
}

// GetSecret provides a mock function with given fields: ctx, token
func (_m *SecretsProvider) GetSecret(ctx context.Context, token string) (string, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetSecret")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecretsProvider_GetSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecret'
type SecretsProvider_GetSecret_Call struct {
	*mock.Call
}

// GetSecret is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *SecretsProvider_Expecter) GetSecret(ctx interface{}, token interface{}) *SecretsProvider_GetSecret_Call {
	return &SecretsProvider_GetSecret_Call{Call: _e.mock.On("GetSecret", ctx, token)}
}

func (_c *SecretsProvider_GetSecret_Call) Run(run func(ctx context.Context, token string)) *SecretsProvider_GetSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *SecretsProvider_GetSecret_Call) Return(_a0 string, _a1 error) *SecretsProvider_GetSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecretsProvider_GetSecret_Call) RunAndReturn(run func(context.Context, string) (string, error)) *SecretsProvider_GetSecret_Call {
	_c.Call.Return(run)
	return _c
}

// SaveSecret provides a mock function with given fields: ctx, message, dues
func (_m *SecretsProvider) SaveSecret(ctx context.Context, message string, dues int) (string, error) {
	ret := _m.Called(ctx, message, dues)

	if len(ret) == 0 {
		panic("no return value specified for SaveSecret")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) (string, error)); ok {
		return rf(ctx, message, dues)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) string); ok {
		r0 = rf(ctx, message, dues)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, message, dues)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecretsProvider_SaveSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveSecret'
type SecretsProvider_SaveSecret_Call struct {
	*mock.Call
}

// SaveSecret is a helper method to define mock.On call
//   - ctx context.Context
//   - message string
//   - dues int
func (_e *SecretsProvider_Expecter) SaveSecret(ctx interface{}, message interface{}, dues interface{}) *SecretsProvider_SaveSecret_Call {
	return &SecretsProvider_SaveSecret_Call{Call: _e.mock.On("SaveSecret", ctx, message, dues)}
}

func (_c *SecretsProvider_SaveSecret_Call) Run(run func(ctx context.Context, message string, dues int)) *SecretsProvider_SaveSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *SecretsProvider_SaveSecret_Call) Return(_a0 string, _a1 error) *SecretsProvider_SaveSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecretsProvider_SaveSecret_Call) RunAndReturn(run func(context.Context, string, int) (string, error)) *SecretsProvider_SaveSecret_Call {
	_c.Call.Return(run)
	return _c
}

// NewSecretsProvider creates a new instance of SecretsProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSecretsProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *SecretsProvider {
	mock := &SecretsProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
